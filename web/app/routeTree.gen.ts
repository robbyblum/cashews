/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TeamsImport } from './routes/teams'
import { Route as ScorigamiImport } from './routes/scorigami'
import { Route as PlayersImport } from './routes/players'
import { Route as MapImport } from './routes/map'
import { Route as IndexImport } from './routes/index'
import { Route as TeamIdRouteImport } from './routes/team.$id/route'
import { Route as TeamIdIndexImport } from './routes/team.$id/index'
import { Route as TeamIdStatsImport } from './routes/team.$id/stats'
import { Route as TeamIdRosterImport } from './routes/team.$id/roster'
import { Route as TeamIdGamesImport } from './routes/team.$id/games'

// Create/Update Routes

const TeamsRoute = TeamsImport.update({
  id: '/teams',
  path: '/teams',
  getParentRoute: () => rootRoute,
} as any)

const ScorigamiRoute = ScorigamiImport.update({
  id: '/scorigami',
  path: '/scorigami',
  getParentRoute: () => rootRoute,
} as any)

const PlayersRoute = PlayersImport.update({
  id: '/players',
  path: '/players',
  getParentRoute: () => rootRoute,
} as any)

const MapRoute = MapImport.update({
  id: '/map',
  path: '/map',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TeamIdRouteRoute = TeamIdRouteImport.update({
  id: '/team/$id',
  path: '/team/$id',
  getParentRoute: () => rootRoute,
} as any)

const TeamIdIndexRoute = TeamIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => TeamIdRouteRoute,
} as any)

const TeamIdStatsRoute = TeamIdStatsImport.update({
  id: '/stats',
  path: '/stats',
  getParentRoute: () => TeamIdRouteRoute,
} as any)

const TeamIdRosterRoute = TeamIdRosterImport.update({
  id: '/roster',
  path: '/roster',
  getParentRoute: () => TeamIdRouteRoute,
} as any)

const TeamIdGamesRoute = TeamIdGamesImport.update({
  id: '/games',
  path: '/games',
  getParentRoute: () => TeamIdRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/map': {
      id: '/map'
      path: '/map'
      fullPath: '/map'
      preLoaderRoute: typeof MapImport
      parentRoute: typeof rootRoute
    }
    '/players': {
      id: '/players'
      path: '/players'
      fullPath: '/players'
      preLoaderRoute: typeof PlayersImport
      parentRoute: typeof rootRoute
    }
    '/scorigami': {
      id: '/scorigami'
      path: '/scorigami'
      fullPath: '/scorigami'
      preLoaderRoute: typeof ScorigamiImport
      parentRoute: typeof rootRoute
    }
    '/teams': {
      id: '/teams'
      path: '/teams'
      fullPath: '/teams'
      preLoaderRoute: typeof TeamsImport
      parentRoute: typeof rootRoute
    }
    '/team/$id': {
      id: '/team/$id'
      path: '/team/$id'
      fullPath: '/team/$id'
      preLoaderRoute: typeof TeamIdRouteImport
      parentRoute: typeof rootRoute
    }
    '/team/$id/games': {
      id: '/team/$id/games'
      path: '/games'
      fullPath: '/team/$id/games'
      preLoaderRoute: typeof TeamIdGamesImport
      parentRoute: typeof TeamIdRouteImport
    }
    '/team/$id/roster': {
      id: '/team/$id/roster'
      path: '/roster'
      fullPath: '/team/$id/roster'
      preLoaderRoute: typeof TeamIdRosterImport
      parentRoute: typeof TeamIdRouteImport
    }
    '/team/$id/stats': {
      id: '/team/$id/stats'
      path: '/stats'
      fullPath: '/team/$id/stats'
      preLoaderRoute: typeof TeamIdStatsImport
      parentRoute: typeof TeamIdRouteImport
    }
    '/team/$id/': {
      id: '/team/$id/'
      path: '/'
      fullPath: '/team/$id/'
      preLoaderRoute: typeof TeamIdIndexImport
      parentRoute: typeof TeamIdRouteImport
    }
  }
}

// Create and export the route tree

interface TeamIdRouteRouteChildren {
  TeamIdGamesRoute: typeof TeamIdGamesRoute
  TeamIdRosterRoute: typeof TeamIdRosterRoute
  TeamIdStatsRoute: typeof TeamIdStatsRoute
  TeamIdIndexRoute: typeof TeamIdIndexRoute
}

const TeamIdRouteRouteChildren: TeamIdRouteRouteChildren = {
  TeamIdGamesRoute: TeamIdGamesRoute,
  TeamIdRosterRoute: TeamIdRosterRoute,
  TeamIdStatsRoute: TeamIdStatsRoute,
  TeamIdIndexRoute: TeamIdIndexRoute,
}

const TeamIdRouteRouteWithChildren = TeamIdRouteRoute._addFileChildren(
  TeamIdRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/map': typeof MapRoute
  '/players': typeof PlayersRoute
  '/scorigami': typeof ScorigamiRoute
  '/teams': typeof TeamsRoute
  '/team/$id': typeof TeamIdRouteRouteWithChildren
  '/team/$id/games': typeof TeamIdGamesRoute
  '/team/$id/roster': typeof TeamIdRosterRoute
  '/team/$id/stats': typeof TeamIdStatsRoute
  '/team/$id/': typeof TeamIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/map': typeof MapRoute
  '/players': typeof PlayersRoute
  '/scorigami': typeof ScorigamiRoute
  '/teams': typeof TeamsRoute
  '/team/$id/games': typeof TeamIdGamesRoute
  '/team/$id/roster': typeof TeamIdRosterRoute
  '/team/$id/stats': typeof TeamIdStatsRoute
  '/team/$id': typeof TeamIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/map': typeof MapRoute
  '/players': typeof PlayersRoute
  '/scorigami': typeof ScorigamiRoute
  '/teams': typeof TeamsRoute
  '/team/$id': typeof TeamIdRouteRouteWithChildren
  '/team/$id/games': typeof TeamIdGamesRoute
  '/team/$id/roster': typeof TeamIdRosterRoute
  '/team/$id/stats': typeof TeamIdStatsRoute
  '/team/$id/': typeof TeamIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/map'
    | '/players'
    | '/scorigami'
    | '/teams'
    | '/team/$id'
    | '/team/$id/games'
    | '/team/$id/roster'
    | '/team/$id/stats'
    | '/team/$id/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/map'
    | '/players'
    | '/scorigami'
    | '/teams'
    | '/team/$id/games'
    | '/team/$id/roster'
    | '/team/$id/stats'
    | '/team/$id'
  id:
    | '__root__'
    | '/'
    | '/map'
    | '/players'
    | '/scorigami'
    | '/teams'
    | '/team/$id'
    | '/team/$id/games'
    | '/team/$id/roster'
    | '/team/$id/stats'
    | '/team/$id/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MapRoute: typeof MapRoute
  PlayersRoute: typeof PlayersRoute
  ScorigamiRoute: typeof ScorigamiRoute
  TeamsRoute: typeof TeamsRoute
  TeamIdRouteRoute: typeof TeamIdRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MapRoute: MapRoute,
  PlayersRoute: PlayersRoute,
  ScorigamiRoute: ScorigamiRoute,
  TeamsRoute: TeamsRoute,
  TeamIdRouteRoute: TeamIdRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/map",
        "/players",
        "/scorigami",
        "/teams",
        "/team/$id"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/map": {
      "filePath": "map.tsx"
    },
    "/players": {
      "filePath": "players.tsx"
    },
    "/scorigami": {
      "filePath": "scorigami.tsx"
    },
    "/teams": {
      "filePath": "teams.tsx"
    },
    "/team/$id": {
      "filePath": "team.$id/route.tsx",
      "children": [
        "/team/$id/games",
        "/team/$id/roster",
        "/team/$id/stats",
        "/team/$id/"
      ]
    },
    "/team/$id/games": {
      "filePath": "team.$id/games.tsx",
      "parent": "/team/$id"
    },
    "/team/$id/roster": {
      "filePath": "team.$id/roster.tsx",
      "parent": "/team/$id"
    },
    "/team/$id/stats": {
      "filePath": "team.$id/stats.tsx",
      "parent": "/team/$id"
    },
    "/team/$id/": {
      "filePath": "team.$id/index.tsx",
      "parent": "/team/$id"
    }
  }
}
ROUTE_MANIFEST_END */
